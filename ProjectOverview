THE PROBLEM BASICALLY CONSISTED OF 3 PARTS:
	1. SCRAPPING THE DATA FROM WEB
	2. STORING THE DATA INTO DATABASE
	3. LOADING THE DATA AS POINTER IN MAPS PROVIDED BY GOOGLE MAPS API

SCRAPPING DATA:
	THE WEBSITE STARTING PAGE WHICH HAD TO BE SCRAPPED BASICALLY LOADED ITS DATA FROM ITS API ON THE LINK "https://www.dineout.co.in/xhr/nodeApi/v24/search".
	THE PAGINATION SCHEME USED WAS DYNAMIC SO, NORMAL SCRAPPING WOULD HAVE LEAD TO SCRAP DATA ONLY FROM THE FIRST PAGE AND CHANGING PAGE WAS NOT POSSIBLE STATICALLY.
	OPTIONS AVAILABLE FOR SCRAPPING WERE:

		1. SELENIUM: SELENIUM COULD HAVE BEEN CHOOSED TO AUTOMATICLLY CHANGE THE PAGE BY CLICKING NEXT PAGE BUTTON AND CONTENT ON THE BROWSER COULD HAVE BEEN WRITTEN IN
			     A STATIC HTML FILE IN LOCAL SYSTEM AND FURTHER SCRAPPING WAS POSSIBLE OVER THE SAVED HTML FILE.
			     PROS OF SELENIUM: POWERFULL ON DYNAMIC PAGES AND AUTOMATION
			     CONS            : PROCESSING IS SLOW AND A LOT OF TEMPORARY HTML FILES WOULD HAVE BEEN CREATAED AND INSTALLATION AND DRIVER COMPLEXITY IS HIGH.

		2. BEAUTIFULSOUP(IF API REQUEST OF THE DINOUT.COM COULD BE COPIED) : ONE OF THE MOST SIMPLE AND WIDELY USED TOOLS FOR SCRAPPING WITH HIGH PROCESSING SPEED. SINCE 
										     IT WAS POSSIBLE TO COPY THE API REQUEST FORMAT, BEAUTIFUL SOUP WAS PREFERED FOR ITS 											     SIMPLICITY.

	THE API REQUEST FORMAT WAS COPIED AND THE API OF DINEOUT WAS REQUESTED IN A LOOP UNTILL IT REFUSES CONNECTION, THE LINK OF THE EACH HOTEL LIST IN THE FORMAT 
	"bangalore/hammered-cunningham-road-central-bangalore-23017" WAS TAKEN FIRST AND APPENDED TO "https://www.dineout.co.in". THE EQUIVALENT STRING
	"https://www.dineout.co.in/bangalore/hammered-cunningham-road-central-bangalore-23017" LEAD TO THE HTML PAGE FROM WHERE DATA SCRAPPING WAS POSSIBLE. DATA FROM
	THE PAGE SUCH AS NAME,URL,LOCATION,LATITUDE,LONGITUDE,RATING WAS STORED IN THE DATABASE USING 2 WAYS PROVIDED FOR THE USER TO DECIDE WHICH HAS BEEN STATED IN 
	"STORING THE DATA INTO DATABSE TOPIC."
	

STORING THE DATA INTO DATABASE:
	FOR STORING THE DATA INTO DATABASE 2 OPTIONS HAVE BEEN PROVIDED:
		
		1. THROUGH API: USING THE SCRAPPING.PY WHICH GENERATES FINAL_JSON.JSON FILE WHOSE DATA CAN BE POSTED INTO THE API DEVELOPED IN THE DJANGO PROJECT UNDER THE LINK
		 		"http://localhost:8000/hotels/import/". USING POSTMAN OR ANY HTTP CLIENT, DATA CAN BE INSRTED INTO THE DATABASE OF THE DJANGO PROJECT.
		
		2. SCRAPPING SCRIPT DEVELOPED AS DJANGO APP: AN APP NAMED SCRAPPING HAS BEEN DEVELOPED UNDER THE DJANGO MAIN PROJECT HOTELS WHICH SCRAPES THE DATA AND SAVES IT 					AUTOMATICALLY ONE BY ONE INTO DATABASE.THE BROWSER TAB WILL NOT DISPLAY ANYTHING BUT LOADING BAR WILL BE SHOWN UNTILL THE COMPLETE DATA 					HAS BEEN INSERTED INTO THE DATABASE.LINK TO ACCESS THE SCRAPPING PAGE IS  "http://localhost:8000/scrapping/start"


LOADING DATA AS POINTER IN HTML PAGE:
	GOOGLE MAPS API WAS USED AND JSON DATA FROM THE DJANGO WAS PROVIDED TO THE JAVASCRIPT FUNCTION IN HTML PAGE. THE JAVASCRIPT PARSED THE JSON VALUE AND DISPLAYED IT IN THE 		FORM OF POINTERS IN THE GOOGLE MAPS PROVIDED BY MAPS API.LINK TO THE MAIN PAGE: "http://localhost:8000/hotels/map/"

Project Contents:
	1. /hotels/map to load the maps
	2. /scrapping/start to start browser based scrapping
	3. /hotels/import/ to import data using API
	4. /admin to manage admin pannel credentials in readme
	4. scrapping.py to generate static json format after scrapping
